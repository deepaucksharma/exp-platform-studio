name: Implementation CI

on:
  push:
    branches: [ main ]
    paths:
      - 'generated_implementation/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'generated_implementation/**'
  workflow_dispatch:

jobs:
  auto-detect-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Detect project type
        id: detect
        run: |
          if [ -f "package.json" ]; then
            echo "type=js" >> $GITHUB_OUTPUT
          elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
            echo "type=python" >> $GITHUB_OUTPUT
          elif [ -f "go.mod" ]; then
            echo "type=go" >> $GITHUB_OUTPUT
          elif [ -f "Cargo.toml" ]; then
            echo "type=rust" >> $GITHUB_OUTPUT
          elif [ -f "pom.xml" ] || [ -f "build.gradle" ]; then
            echo "type=java" >> $GITHUB_OUTPUT
          else
            echo "type=unknown" >> $GITHUB_OUTPUT
          fi
      
      # JavaScript/Node.js setup
      - name: Setup Node.js
        if: steps.detect.outputs.type == 'js'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install JS dependencies
        if: steps.detect.outputs.type == 'js'
        run: npm ci
      
      - name: Run JS tests
        if: steps.detect.outputs.type == 'js'
        run: npm test
      
      # Python setup
      - name: Setup Python
        if: steps.detect.outputs.type == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install Python dependencies
        if: steps.detect.outputs.type == 'python'
        run: |
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          elif [ -f "pyproject.toml" ]; then
            pip install -e .
          fi
      
      - name: Run Python tests
        if: steps.detect.outputs.type == 'python'
        run: pytest -xvs
      
      # Go setup
      - name: Setup Go
        if: steps.detect.outputs.type == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          cache: true
      
      - name: Build Go project
        if: steps.detect.outputs.type == 'go'
        run: go build ./...
      
      - name: Run Go tests
        if: steps.detect.outputs.type == 'go'
        run: go test ./...
      
      # Rust setup
      - name: Setup Rust
        if: steps.detect.outputs.type == 'rust'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      
      - name: Build Rust project
        if: steps.detect.outputs.type == 'rust'
        run: cargo build
      
      - name: Run Rust tests
        if: steps.detect.outputs.type == 'rust'
        run: cargo test
      
      # Java setup
      - name: Setup Java
        if: steps.detect.outputs.type == 'java'
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Build with Maven
        if: steps.detect.outputs.type == 'java' && contains(hashFiles('pom.xml'), '*')
        run: mvn -B package
      
      - name: Build with Gradle
        if: steps.detect.outputs.type == 'java' && contains(hashFiles('build.gradle'), '*')
        run: ./gradlew build
